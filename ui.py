import streamlit as st
import requests
import json
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import markdown
from datetime import datetime
from config.ui_config import API_URL

# C·∫•u h√¨nh
st.set_page_config(layout="wide")
API_URL = API_URL + "/team"

def markdown_table_to_html(markdown_text):
    import re
    table_pattern = r'\|.*?\|\n\|[-|:\s]+\|\n(?:\|.*?\|\n)*'
    tables = re.findall(table_pattern, markdown_text, re.MULTILINE)
    
    if not tables:
        return markdown.markdown(markdown_text)
    
    html_content = markdown_text
    for table in tables:
        rows = table.strip().split('\n')
        if len(rows) < 2:
            continue
            
        headers = [h.strip() for h in rows[0].split('|') if h.strip()]
        body_rows = [[cell.strip() for cell in row.split('|') if cell.strip()] for row in rows[2:]]
        
        html_table = "<table>\n<thead>\n<tr>"
        for header in headers:
            html_table += f"<th>{header}</th>"
        html_table += "</tr>\n</thead>\n<tbody>"
        
        for row in body_rows:
            html_table += "\n<tr>"
            for cell in row:
                html_table += f"<td>{cell}</td>"
            html_table += "</tr>"
        html_table += "\n</tbody>\n</table>"
        
        html_content = html_content.replace(table, html_table)
    
    return markdown.markdown(html_content)

# √Ånh x·∫° t√™n c·ªôt ƒë·ªÉ x·ª≠ l√Ω s·ª± kh√¥ng kh·ªõp
COLUMN_MAPPING = {
    "average volume": "avg_volume",
    "average close_price": "avg_close_price",
    "volume": "avg_volume",
    "close_price": "avg_close_price"
}

st.markdown("""
<style>
.chat-dashboard-container {
    display: flex;
    width: 100vw;
    min-height: calc(100vh - 70px);
}
.chat-column {
    flex: 7;
    display: flex;
    flex-direction: column;
    padding: 10px;
}
.chat-container {
    flex: 1;
    overflow-y: auto;
    padding: 10px;
    border: 1px solid #e0e0e0;
    border-radius: 5px;
}
.input-container {
    height: 80px;
    padding: 10px 0;
}
.dashboard-column {
    flex: 3;
    padding: 10px;
    border-left: 1px solid #e0e0e0;
}
.user-message {
    background-color: #4CAF50;
    color: white;
    margin-left: auto;
    max-width: 70%;
    padding: 10px;
    border-radius: 10px;
    margin-bottom: 10px;
}
.assistant-message {
    background-color: white;
    border: 1px solid #e0e0e0;
    color: black;
    max-width: 70%;
    padding: 10px;
    border-radius: 10px;
    margin-bottom: 10px;
}
.avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    font-size: 24px;
    text-align: center;
    line-height: 40px;
    margin: 0 10px;
}
.user-message .user-avatar {
    background-color: #4CAF50;
    color: white;
}
.assistant-message .assistant-avatar {
    background-color: #007bff;
    color: white;
}
@media (max-width: 768px) {
    .chat-dashboard-container {
        flex-direction: column;
    }
    .chat-column, .dashboard-column {
        flex: 1;
        width: 100%;
    }
    .avatar {
        width: 30px;
        height: 30px;
        font-size: 20px;
        line-height: 30px;
    }
    .timestamp {
        font-size: 10px;
    }
    .input-container {
        height: 100px;
    }
    table, th, td {
        font-size: 12px;
        padding: 5px;
    }
}
</style>
""", unsafe_allow_html=True)

# Kh·ªüi t·∫°o session state
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []
if 'dashboard_info' not in st.session_state:
    st.session_state.dashboard_info = None

# Ti√™u ƒë·ªÅ
st.title("Financial Assistant")
st.markdown("Tr√≤ chuy·ªán v·ªõi c√°c agent t√†i ch√≠nh c·ªßa b·∫°n")

# B·ªë c·ª•c ch√≠nh
chat_col, dashboard_col = st.columns([7, 3])

# Khu v·ª±c chat
with chat_col:
    st.markdown('<div class="chat-container">', unsafe_allow_html=True)
    for chat in st.session_state.chat_history:
        if chat['role'] == 'user':
            st.markdown(f"""
            <div style='display: flex; justify-content: flex-end; align-items: center;'>
                <div class='user-message'>
                    {markdown.markdown(chat['message'])}
                    <div class='timestamp'>{chat['timestamp']}</div>
                </div>
                <div class='avatar user-avatar'>üë§</div>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div style='display: flex; align-items: center;'>
                <div class='avatar assistant-avatar'>ü§ñ</div>
                <div class='assistant-message'>
                    {markdown_table_to_html(chat['message'])}
                    <div class='timestamp'>{chat['timestamp']}</div>
                </div>
            </div>
            """, unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)   

    # T·ª± ƒë·ªông cu·ªôn
    st.markdown("""
    <script>
        const chatContainer = document.querySelector('.chat-container');
        chatContainer.scrollTop = chatContainer.scrollHeight;
    </script>
    """, unsafe_allow_html=True)

    # Khung nh·∫≠p li·ªáu
    with st.container():
        query = st.text_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n (v√≠ d·ª•: Gi√° ƒë√≥ng c·ª≠a c·ªßa Apple ng√†y 01/01/2025?)", key="query")
        col1, col2 = st.columns(2)
        with col1:
            if st.button("G·ª≠i", key="send", type="primary"):
                if query:
                    timestamp = datetime.now().strftime("%H:%M:%S %d/%m/%Y")
                    st.session_state.chat_history.append({"role": "user", "message": query, "timestamp": timestamp})
                    
                    try:
                        response = requests.post(API_URL, json={"query": query})
                        response_data = response.json()
                        print(response_data, flush=True)
                        response_json = json.loads(response_data['response'])
                        if response_json['status'] == 'success':
                            st.session_state.chat_history.append({
                                "role": "assistant",
                                "message": response_json['message'],
                                "timestamp": datetime.now().strftime("%H:%M:%S %d/%m/%Y")
                            })
                            if 'data' in response_json and 'dashboard' in response_json['data'] and response_json['data']['dashboard']['enabled']:
                                st.session_state.dashboard_info = response_json['data']['dashboard']
                            else:
                                st.session_state.dashboard_info = None
                            st.session_state.logs = response_json.get('logs', 'Kh√¥ng c√≥ log n√†o ƒë∆∞·ª£c g·ª≠i l√™n.')
                        else:
                            st.session_state.chat_history.append({
                                "role": "assistant",
                                "message": f"L·ªói: {response_json['message']}",
                                "timestamp": datetime.now().strftime("%H:%M:%S %d/%m/%Y")
                            })
                            st.session_state.dashboard_info = None
                            st.session_state.logs = response_json.get('logs', 'Kh√¥ng c√≥ log n√†o ƒë∆∞·ª£c g·ª≠i l√™n.')
                    except Exception as e:
                        st.session_state.chat_history.append({
                            "role": "assistant",
                            "message": f"L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API. {str(e)}",
                            "timestamp": datetime.now().strftime("%H:%M:%S %d/%m/%Y")
                        })
                        st.session_state.dashboard_info = None
                        st.session_state.logs = 'L·ªói khi k·∫øt n·ªëi API, kh√¥ng c√≥ log.'
                    st.rerun()
        with col2:
            if st.button("X√≥a l·ªãch s·ª≠", key="clear", type="secondary"):
                st.session_state.chat_history = []
                st.session_state.dashboard_info = None
                st.rerun()

    # Debug l·ªãch s·ª≠ chat
    st.write(f"S·ªë tin nh·∫Øn trong l·ªãch s·ª≠: {len(st.session_state.chat_history)}")
    st.write("N·ªôi dung l·ªãch s·ª≠ chat:", st.session_state.chat_history)

# H√†m t·∫°o dashboard
def create_dashboard(data, visualization):
    visualization_type = visualization.get("type", "none")
    required_columns = visualization.get("required_columns", [])
    aggregation = visualization.get("aggregation", None)
    
    # Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if not data:
        st.markdown("<p style='text-align: center; color: #888;'>D·ªØ li·ªáu tr·ªëng.</p>", unsafe_allow_html=True)
        return

    # T·∫°o DataFrame t·ª´ d·ªØ li·ªáu
    df = pd.DataFrame(data)
    
    # √Ånh x·∫° required_columns sang t√™n c·ªôt th·ª±c t·∫ø
    mapped_columns = [COLUMN_MAPPING.get(col, col) for col in required_columns]
    
    # 1. Table
    if visualization_type == "table":
        missing_columns = [col for col in mapped_columns if col not in df.columns]
        if missing_columns:
            st.markdown(f"<p style='text-align: center; color: #888;'>D·ªØ li·ªáu thi·∫øu c·ªôt: {', '.join(missing_columns)}.</p>", unsafe_allow_html=True)
            return
        st.dataframe(df[mapped_columns], use_container_width=True)

    # 2. Time Series
    elif visualization_type == "time series":
        try:
            if isinstance(data, dict) and "result" in data:
                data = data["result"]
            if not isinstance(data, list):
                st.markdown("<p style='text-align: center; color: #888;'>D·ªØ li·ªáu kh√¥ng ph·∫£i danh s√°ch h·ª£p l·ªá.</p>", unsafe_allow_html=True)
                return
            if not data or not all(isinstance(item, dict) and "date" in item for item in data):
                st.markdown("<p style='text-align: center; color: #888;'>D·ªØ li·ªáu kh√¥ng ch·ª©a c·ªôt date.</p>", unsafe_allow_html=True)
                return

            df = pd.DataFrame(data)
            df["date"] = pd.to_datetime(df["date"])
            df.set_index("date", inplace=True)
            
            value_col = next((col for col in ["close_price", "volume"] if col in df.columns), None)
            if not value_col:
                st.markdown("<p style='text-align: center; color: #888;'>D·ªØ li·ªáu kh√¥ng ch·ª©a c·ªôt close_price ho·∫∑c volume.</p>", unsafe_allow_html=True)
                return
            
            st.line_chart(df[[value_col]], use_container_width=True)
        except Exception as e:
            st.markdown(f"<p style='text-align: center; color: #888;'>L·ªói khi v·∫Ω bi·ªÉu ƒë·ªì: {str(e)}</p>", unsafe_allow_html=True)

    # 3. Histogram
    elif visualization_type == "histogram":
        try:
            if not mapped_columns or len(mapped_columns) != 1:
                st.markdown("<p style='text-align: center; color: #888;'>Histogram y√™u c·∫ßu ƒë√∫ng 1 c·ªôt d·ªØ li·ªáu.</p>", unsafe_allow_html=True)
                return
            col = mapped_columns[0]
            if col not in df.columns:
                st.markdown(f"<p style='text-align: center; color: #888;'>D·ªØ li·ªáu thi·∫øu c·ªôt: {col}.</p>", unsafe_allow_html=True)
                return

            plt.figure(figsize=(8, 6))
            plt.hist(df[col].dropna(), bins=30, edgecolor='black')
            plt.title(f"Histogram of {col}")
            plt.xlabel(col)
            plt.ylabel("Frequency")
            plt.grid(True, alpha=0.3)
            st.pyplot(plt)
            plt.close()
        except Exception as e:
            st.markdown(f"<p style='text-align: center; color: #888;'>L·ªói khi v·∫Ω histogram: {str(e)}</p>", unsafe_allow_html=True)

    # 4. Boxplot
    elif visualization_type == "boxplot":
        try:
            if len(mapped_columns) != 2:
                st.markdown("<p style='text-align: center; color: #888;'>Boxplot y√™u c·∫ßu ƒë√∫ng 2 c·ªôt: nh√≥m v√† gi√° tr·ªã.</p>", unsafe_allow_html=True)
                return
            group_col, value_col = mapped_columns
            if group_col not in df.columns or value_col not in df.columns:
                st.markdown(f"<p style='text-align: center; color: #888;'>D·ªØ li·ªáu thi·∫øu c·ªôt: {group_col} ho·∫∑c {value_col}.</p>", unsafe_allow_html=True)
                return

            plt.figure(figsize=(8, 6))
            sns.boxplot(x=df[group_col], y=df[value_col])
            plt.title(f"Boxplot of {value_col} grouped by {group_col}")
            plt.xlabel(group_col)
            plt.ylabel(value_col)
            plt.xticks(rotation=45)
            plt.grid(True, alpha=0.3)
            st.pyplot(plt)
            plt.close()
        except Exception as e:
            st.markdown(f"<p style='text-align: center; color: #888;'>L·ªói khi v·∫Ω boxplot: {str(e)}</p>", unsafe_allow_html=True)

    # 5. Scatter Plot
    elif visualization_type == "scatter":
        try:
            if len(mapped_columns) != 2:
                st.markdown("<p style='text-align: center; color: #888;'>Scatter plot y√™u c·∫ßu ƒë√∫ng 2 c·ªôt: x v√† y.</p>", unsafe_allow_html=True)
                return
            x_col, y_col = mapped_columns
            if x_col not in df.columns or y_col not in df.columns:
                st.markdown(f"<p style='text-align: center; color: #888;'>D·ªØ li·ªáu thi·∫øu c·ªôt: {x_col} ho·∫∑c {y_col}.</p>", unsafe_allow_html=True)
                return

            plt.figure(figsize=(8, 6))
            plt.scatter(df[x_col], df[y_col], alpha=0.5)
            plt.title(f"{x_col} vs {y_col}")
            plt.xlabel(x_col)
            plt.ylabel(y_col)
            plt.grid(True, alpha=0.3)
            st.pyplot(plt)
            plt.close()
        except Exception as e:
            st.markdown(f"<p style='text-align: center; color: #888;'>L·ªói khi v·∫Ω scatter plot: {str(e)}</p>", unsafe_allow_html=True)

    # 6. Bar Chart
    elif visualization_type == "bar":
        try:
            if len(mapped_columns) != 2:
                st.markdown("<p style='text-align: center; color: #888;'>Bar chart y√™u c·∫ßu ƒë√∫ng 2 c·ªôt: danh m·ª•c v√† gi√° tr·ªã.</p>", unsafe_allow_html=True)
                return
            category_col, value_col = mapped_columns
            if category_col not in df.columns or value_col not in df.columns:
                st.markdown(f"<p style='text-align: center; color: #888;'>D·ªØ li·ªáu thi·∫øu c·ªôt: {category_col} ho·∫∑c {value_col}.</p>", unsafe_allow_html=True)
                return

            plt.figure(figsize=(8, 6))
            plt.bar(df[category_col], df[value_col])
            plt.title(f"{value_col} by {category_col}")
            plt.xlabel(category_col)
            plt.ylabel(value_col)
            plt.xticks(rotation=45)
            plt.grid(True, alpha=0.3)
            st.pyplot(plt)
            plt.close()
        except Exception as e:
            st.markdown(f"<p style='text-align: center; color: #888;'>L·ªói khi v·∫Ω bar chart: {str(e)}</p>", unsafe_allow_html=True)

    # 7. Pie Chart
    elif visualization_type == "pie":
        try:
            # Ki·ªÉm tra aggregation
            if aggregation == "count":
                if len(mapped_columns) != 1:
                    st.markdown("<p style='text-align: center; color: #888;'>Pie chart v·ªõi aggregation 'count' y√™u c·∫ßu ƒë√∫ng 1 c·ªôt danh m·ª•c.</p>", unsafe_allow_html=True)
                    return
                category_col = mapped_columns[0]
                value_col = "count"
            else:
                if len(mapped_columns) != 2:
                    st.markdown("<p style='text-align: center; color: #888;'>Pie chart y√™u c·∫ßu ƒë√∫ng 2 c·ªôt: danh m·ª•c v√† gi√° tr·ªã.</p>", unsafe_allow_html=True)
                    return
                category_col, value_col = mapped_columns

            if category_col not in df.columns or value_col not in df.columns:
                st.markdown(f"<p style='text-align: center; color: #888;'>D·ªØ li·ªáu thi·∫øu c·ªôt: {category_col} ho·∫∑c {value_col}.</p>", unsafe_allow_html=True)
                return

            plt.figure(figsize=(8, 6))
            plt.pie(df[value_col], labels=df[category_col], autopct='%1.1f%%')
            plt.title(f"Distribution of {value_col} by {category_col}")
            st.pyplot(plt)
            plt.close()
        except Exception as e:
            st.markdown(f"<p style='text-align: center; color: #888;'>L·ªói khi v·∫Ω pie chart: {str(e)}</p>", unsafe_allow_html=True)

    # 8. Heatmap
    elif visualization_type == "heatmap":
        try:
            if not isinstance(data, list) or not all(isinstance(row, list) for row in data):
                st.markdown("<p style='text-align: center; color: #888;'>Heatmap y√™u c·∫ßu d·ªØ li·ªáu d·∫°ng ma tr·∫≠n (list of lists).</p>", unsafe_allow_html=True)
                return

            matrix = np.array(data)
            plt.figure(figsize=(8, 6))
            sns.heatmap(matrix, annot=True, cmap="coolwarm", center=0)
            plt.title("Correlation Matrix")
            st.pyplot(plt)
            plt.close()
        except Exception as e:
            st.markdown(f"<p style='text-align: center; color: #888;'>L·ªói khi v·∫Ω heatmap: {str(e)}</p>", unsafe_allow_html=True)

    else:
        st.markdown(f"<p style='text-align: center; color: #888;'>Lo·∫°i bi·ªÉu ƒë·ªì kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {visualization_type}.</p>", unsafe_allow_html=True)

# Khu v·ª±c dashboard
with dashboard_col:
    if st.session_state.dashboard_info and st.session_state.dashboard_info['enabled']:
        create_dashboard(st.session_state.dashboard_info['data'], st.session_state.dashboard_info['visualization'])
    else:
        st.markdown("<p style='text-align: center; color: #888;'>Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã.</p>", unsafe_allow_html=True)
    
    st.markdown("### Log x·ª≠ l√Ω")
    with st.expander("Xem chi ti·∫øt log", expanded=False):
        st.text(st.session_state.get('logs', 'Ch∆∞a c√≥ log n√†o ƒë·ªÉ hi·ªÉn th·ªã.'))